# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Author {
  id: ID!
  name: String!
  slug: String!
  books: [Book!]!
}

type Category {
  id: ID!
  name: String!
  slug: String!
  books: [Book!]!
}

type Promotion {
  id: ID!
  title: String!
  slug: String!
  beginAt: DateTime!
  endAt: DateTime!
  isActive: Boolean!
  description: String!
  bookPromotions: BookPromotion!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type BookPromotion {
  id: ID!
  discount: Float!
  book: Book!
  promotion: Promotion!
}

type Analysis {
  id: ID!
  avarageRating: Float!
  totalRating: Float!
  totalReview: Float!
  totalOrder: Float!
  totalOrderQuantity: Float!
}

type Pagination {
  page: Float!
  limit: Float!
  count: Float!
  total: Float!
}

type Book {
  id: ID!
  title: String!
  description: String!
  price: Float!
  mainImage: String!
  slug: String!
  authors: [Author!]!
  categories: [Category!]!
  promotions: [BookPromotion!]!
  analysis: Analysis!
}

type BooksWithPagination {
  books: [Book!]!
  pagination: Pagination!
}

type Order {
  books: [OrderToBook!]!
  id: String!
  status: String!
}

type OrderToBook {
  book: Book!
  quantity: Float!
  discount: Float!
  price: Float!
}

type Cart {
  book: Book!
  quantity: Float!
  discount: Float!
  promotion: Promotion
}

type User {
  id: ID!
  orders: [Order!]!
  carts: [Cart!]!
}

type Query {
  book(slug: String!): Book!
  books(pagination: PaginationDto!, filter: BookFilterDto!): BooksWithPagination!
  count: Float!
  author(slug: String!): Author!
  authors: [Author!]!
  category(slug: String!): Category!
  categories: [Category!]!
  user: User!
}

input PaginationDto {
  page: Float = 1
  limit: Float = 10
  sort: String = "popularity"
  order: String = "desc"
  search: String = ""
}

input BookFilterDto {
  categories: [String!] = []
  authors: [String!] = []
  search: String = ""
}

type Mutation {
  updateCart(dto: UpdateCartDto!): [Cart!]!
  removeCart(bookId: String!): [Cart!]!
  checkoutOrder: Order!
}

input UpdateCartDto {
  bookId: String!
  quantity: Float!
}