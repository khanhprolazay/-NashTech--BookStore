import { ExecutionContext, HttpException, Injectable } from '@nestjs/common';
import { BaseGuard } from './base.guard';
import { Reflector } from '@nestjs/core';
import { OAuthService } from '../module/oauth/service/oauth.service';
import { UserService } from 'src/user/user.service';
import { JwtUtil } from '../module/oauth/util/jwt.util';

@Injectable()
export class AuthGuard extends BaseGuard {
  constructor(
    protected refrector: Reflector,
    protected userService: UserService,
    protected oauthService: OAuthService,
    protected jwtUtil: JwtUtil,
  ) {
    super(refrector);
  }

  async canActivate(context: ExecutionContext) {
    try {
      // Get token from request header and verify
      const request = this.getRequest(context);
      const { authorization } = request.headers;
      const token = authorization.split(' ')[1];
      const valid = await this.oauthService.verify(token);
      if (!valid) throw new HttpException('Unauthorized', 401);

      /* 
      There are two types of token
        1. User token: This token is generated by OAuth2 server
        2. Service token: This token is generated by service in service to service communication
      If it comes from service token, we don't need to check user information
      */

      const decode = this.jwtUtil.decode(token);
      if (decode.email) {
        // Get user information and create user if not exists
        const information = await this.oauthService.getInformation(token);
        let user = await this.userService.findById(information.sub);
        if (!user) await this.userService.create({ id: information.sub });

        // Attach user to request object
        request.user = this.jwtUtil.decodeComplete(token);
      }
      return true;
    } catch (error) {
      throw new HttpException('Unauthorized', 401);
    }
  }
}
