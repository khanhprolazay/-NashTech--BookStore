// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id
  name String
  email String
  picture String

  cart Cart[]
  reviews Review[]
  orders  Order[]
  promotions Promotion[]
}

model Book {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  slug        String
  isbn        String
  mainImage   String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cart       Cart[]
  reviews    Review[]
  images     Image[]
  analysis   Analysis?
  categories BookToCategory[]
  authors    BookToAuthor[]
  orders     OrderToBook[]
  promotions PromotionToBook[]

  @@unique([slug])
  @@unique([isbn])
}

model Review {
  id        String   @id @default(cuid())
  title     String
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  bookId String
  user   User   @relation(fields: [userId], references: [id])
  book   Book   @relation(fields: [bookId], references: [id])
}

model Image {
  id     String @id @default(cuid())
  url    String
  bookId String

  book Book @relation(fields: [bookId], references: [id])
}

model Analysis {
  id                 String @id @default(cuid())
  avarageRating      Float  @default(0)
  totalRating        Int    @default(0)
  totalReview        Int    @default(0)
  totalView          Int    @default(0)
  totalOrder         Int    @default(0)
  totalOrderQuantity Int    @default(0)

  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  @@unique([bookId])
}

model Category {
  id   String @id @default(cuid())
  name String
  slug String

  books BookToCategory[]

  @@unique([name])
  @@unique([slug])
}

model BookToCategory {
  id String @id @default(cuid())

  bookId     String
  categoryId String
  book       Book     @relation(fields: [bookId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([bookId, categoryId])
}

model Author {
  id   String @id @default(cuid())
  name String
  slug String

  books BookToAuthor[]

  @@unique([name])
  @@unique([slug])
}

model BookToAuthor {
  id String @id @default(cuid())

  bookId   String
  authorId String
  book     Book   @relation(fields: [bookId], references: [id])
  author   Author @relation(fields: [authorId], references: [id])

  @@unique([bookId, authorId])
}

model Order {
  id            String      @id @default(cuid())
  currentStatus OrderStatus
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  userId String
  bookId String

  user             User               @relation(fields: [userId], references: [id])
  books            OrderToBook[]
  orderTrackingLog OrderTrackingLog[]
}

model OrderToBook {
  id       String @id @default(cuid())
  quantity Int
  price    Float
  discount Float
  bookId   String
  orderId  String

  book  Book  @relation(fields: [bookId], references: [id])
  order Order @relation(fields: [orderId], references: [id])
}

model OrderTrackingLog {
  id        String      @id @default(cuid())
  status    OrderStatus
  createdAt DateTime    @default(now())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPING
  DELIVERED
  CANCELLED
}

model Promotion {
  id          String   @id @default(cuid())
  title       String
  slug        String
  description String
  isActive    Boolean
  beginAt     DateTime
  endAt       DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdUserId String

  books PromotionToBook[]
  createdUser User @relation(fields: [createdUserId], references: [id])
}

model PromotionToBook {
  id String @id @default(cuid())

  promotionId String
  bookId      String
  discount    Int

  promotion Promotion @relation(fields: [promotionId], references: [id])
  book      Book      @relation(fields: [bookId], references: [id])

  @@unique([promotionId, bookId])
}

model Cart {
  id String @id @default(cuid())

  userId String
  bookId String
  quantity Int

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@unique([userId, bookId])
}